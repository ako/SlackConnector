// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package testslackconnector.proxies;

public class ReceivedSlackMessages
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject receivedSlackMessagesMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "TestSlackConnector.ReceivedSlackMessages";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Timestamp("Timestamp"),
		Sender("Sender"),
		Text("Text"),
		Channel("Channel"),
		EventJson("EventJson");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public ReceivedSlackMessages(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "TestSlackConnector.ReceivedSlackMessages"));
	}

	protected ReceivedSlackMessages(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject receivedSlackMessagesMendixObject)
	{
		if (receivedSlackMessagesMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("TestSlackConnector.ReceivedSlackMessages", receivedSlackMessagesMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a TestSlackConnector.ReceivedSlackMessages");

		this.receivedSlackMessagesMendixObject = receivedSlackMessagesMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'ReceivedSlackMessages.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static testslackconnector.proxies.ReceivedSlackMessages initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return testslackconnector.proxies.ReceivedSlackMessages.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static testslackconnector.proxies.ReceivedSlackMessages initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new testslackconnector.proxies.ReceivedSlackMessages(context, mendixObject);
	}

	public static testslackconnector.proxies.ReceivedSlackMessages load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return testslackconnector.proxies.ReceivedSlackMessages.initialize(context, mendixObject);
	}

	public static java.util.List<testslackconnector.proxies.ReceivedSlackMessages> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<testslackconnector.proxies.ReceivedSlackMessages> result = new java.util.ArrayList<testslackconnector.proxies.ReceivedSlackMessages>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//TestSlackConnector.ReceivedSlackMessages" + xpathConstraint))
			result.add(testslackconnector.proxies.ReceivedSlackMessages.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Timestamp
	 */
	public final java.util.Date getTimestamp()
	{
		return getTimestamp(getContext());
	}

	/**
	 * @param context
	 * @return value of Timestamp
	 */
	public final java.util.Date getTimestamp(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.Timestamp.toString());
	}

	/**
	 * Set value of Timestamp
	 * @param timestamp
	 */
	public final void setTimestamp(java.util.Date timestamp)
	{
		setTimestamp(getContext(), timestamp);
	}

	/**
	 * Set value of Timestamp
	 * @param context
	 * @param timestamp
	 */
	public final void setTimestamp(com.mendix.systemwideinterfaces.core.IContext context, java.util.Date timestamp)
	{
		getMendixObject().setValue(context, MemberNames.Timestamp.toString(), timestamp);
	}

	/**
	 * @return value of Sender
	 */
	public final java.lang.String getSender()
	{
		return getSender(getContext());
	}

	/**
	 * @param context
	 * @return value of Sender
	 */
	public final java.lang.String getSender(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Sender.toString());
	}

	/**
	 * Set value of Sender
	 * @param sender
	 */
	public final void setSender(java.lang.String sender)
	{
		setSender(getContext(), sender);
	}

	/**
	 * Set value of Sender
	 * @param context
	 * @param sender
	 */
	public final void setSender(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String sender)
	{
		getMendixObject().setValue(context, MemberNames.Sender.toString(), sender);
	}

	/**
	 * @return value of Text
	 */
	public final java.lang.String getText()
	{
		return getText(getContext());
	}

	/**
	 * @param context
	 * @return value of Text
	 */
	public final java.lang.String getText(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Text.toString());
	}

	/**
	 * Set value of Text
	 * @param text
	 */
	public final void setText(java.lang.String text)
	{
		setText(getContext(), text);
	}

	/**
	 * Set value of Text
	 * @param context
	 * @param text
	 */
	public final void setText(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String text)
	{
		getMendixObject().setValue(context, MemberNames.Text.toString(), text);
	}

	/**
	 * @return value of Channel
	 */
	public final java.lang.String getChannel()
	{
		return getChannel(getContext());
	}

	/**
	 * @param context
	 * @return value of Channel
	 */
	public final java.lang.String getChannel(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Channel.toString());
	}

	/**
	 * Set value of Channel
	 * @param channel
	 */
	public final void setChannel(java.lang.String channel)
	{
		setChannel(getContext(), channel);
	}

	/**
	 * Set value of Channel
	 * @param context
	 * @param channel
	 */
	public final void setChannel(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String channel)
	{
		getMendixObject().setValue(context, MemberNames.Channel.toString(), channel);
	}

	/**
	 * @return value of EventJson
	 */
	public final java.lang.String getEventJson()
	{
		return getEventJson(getContext());
	}

	/**
	 * @param context
	 * @return value of EventJson
	 */
	public final java.lang.String getEventJson(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.EventJson.toString());
	}

	/**
	 * Set value of EventJson
	 * @param eventjson
	 */
	public final void setEventJson(java.lang.String eventjson)
	{
		setEventJson(getContext(), eventjson);
	}

	/**
	 * Set value of EventJson
	 * @param context
	 * @param eventjson
	 */
	public final void setEventJson(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String eventjson)
	{
		getMendixObject().setValue(context, MemberNames.EventJson.toString(), eventjson);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return receivedSlackMessagesMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final testslackconnector.proxies.ReceivedSlackMessages that = (testslackconnector.proxies.ReceivedSlackMessages) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "TestSlackConnector.ReceivedSlackMessages";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
